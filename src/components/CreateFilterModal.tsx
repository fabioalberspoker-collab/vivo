import { useState, useEffect } from "react";
import { getSupabaseTableNames, getSupabaseTableFields } from "@/integrations/supabase/listTables";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";

interface CreateFilterModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (filter: CustomFilter) => Promise<void>;
}

export interface CustomFilter {
  id: string;
  name: string;
  type: 'Range' | 'Dropdown' | 'Multi-select' | 'Input' | 'Checkbox' | 'Data' | 'Intervalo';
  table: string;
  field: string;
  options?: string[];
}

const filterTypes = [
  { value: 'Range', label: 'Range (Intervalo numérico)' },
  { value: 'Dropdown', label: 'Dropdown (Seleção única)' },
  { value: 'Multi-select', label: 'Multi-select (Seleção múltipla)' },
  { value: 'Input', label: 'Input (Campo de texto)' },
  { value: 'Checkbox', label: 'Checkbox (Verdadeiro/Falso)' },
  { value: 'Data', label: 'Data (Seleção de data)' },
  { value: 'Intervalo', label: 'Intervalo (Período de datas)' }
];

const CreateFilterModal = ({ isOpen, onClose, onSave }: CreateFilterModalProps) => {
  const { toast } = useToast();
  const [formData, setFormData] = useState({
    name: '',
    type: '',
    table: '',
    field: '',
    options: ''
  });

  const handleSave = async () => {
    if (!formData.name || !formData.type || !formData.table || !formData.field) {
      toast({
        title: "Campos obrigatórios",
        description: "Preencha todos os campos obrigatórios.",
        variant: "destructive"
      });
      return;
    }

    const newFilter: CustomFilter = {
      id: '', // Will be generated by Supabase
      name: formData.name,
      type: formData.type as CustomFilter['type'],
      table: formData.table,
      field: formData.field,
      options: formData.options ? formData.options.split(',').map(o => o.trim()) : undefined
    };

    await onSave(newFilter);
    setFormData({ name: '', type: '', table: '', field: '', options: '' });
    onClose();
  };

  const handleClose = () => {
    setFormData({ name: '', type: '', table: '', field: '', options: '' });
    onClose();
  };

  // Estado para tabelas e campos
  const [tableOptions, setTableOptions] = useState<string[]>([]);
  const [fieldOptions, setFieldOptions] = useState<string[]>([]);
  const [loadingTables, setLoadingTables] = useState(false);
  const [loadingFields, setLoadingFields] = useState(false);

  // Buscar tabelas ao abrir modal
  useEffect(() => {
    if (!isOpen) return;
    setLoadingTables(true);
    getSupabaseTableNames().then((tables) => {
      setTableOptions(tables);
      setLoadingTables(false);
    });
  }, [isOpen]);

  // Buscar campos ao selecionar tabela
  useEffect(() => {
    if (!formData.table) {
      setFieldOptions([]);
      return;
    }
    setLoadingFields(true);
    getSupabaseTableFields(formData.table).then((fields) => {
      setFieldOptions(fields);
      setLoadingFields(false);
    });
  }, [formData.table]);

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-[500px] bg-popover">
        <DialogHeader>
          <DialogTitle className="text-vivo-purple">Criar Novo Filtro</DialogTitle>
        </DialogHeader>
        <div className="space-y-4">
          <div>
            <Label htmlFor="filter-name">Nome do Filtro *</Label>
            <Input
              id="filter-name"
              value={formData.name}
              onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
              placeholder="Ex: Prazo de Entrega"
            />
          </div>
          <div>
            <Label>Tipo do Filtro *</Label>
            <Select 
              value={formData.type} 
              onValueChange={(value) => setFormData(prev => ({ ...prev, type: value }))}
            >
              <SelectTrigger>
                <SelectValue placeholder="Selecione o tipo do filtro" />
              </SelectTrigger>
              <SelectContent className="bg-popover">
                {filterTypes.map((type) => (
                  <SelectItem key={type.value} value={type.value}>
                    {type.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          <div>
            <Label htmlFor="table">Tabela de Origem *</Label>
            <Select
              value={formData.table}
              onValueChange={(value) => setFormData(prev => ({ ...prev, table: value, field: '' }))}
              disabled={loadingTables}
            >
              <SelectTrigger>
                <SelectValue placeholder={loadingTables ? "Carregando tabelas..." : "Selecione a tabela de origem"} />
              </SelectTrigger>
              <SelectContent className="bg-popover">
                {tableOptions.map((table) => (
                  <SelectItem key={table} value={table}>
                    {table}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          <div>
            <Label htmlFor="field">Campo da Tabela *</Label>
            <Select
              value={formData.field}
              onValueChange={(value) => setFormData(prev => ({ ...prev, field: value }))}
              disabled={!formData.table || loadingFields}
            >
              <SelectTrigger>
                <SelectValue placeholder={
                  !formData.table
                    ? "Selecione a tabela primeiro"
                    : loadingFields
                      ? "Carregando campos..."
                      : "Selecione o campo da tabela"
                } />
              </SelectTrigger>
              <SelectContent className="bg-popover">
                {fieldOptions.map((field) => (
                  <SelectItem key={field} value={field}>
                    {field}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          {(formData.type === 'Dropdown' || formData.type === 'Multi-select') && (
            <div>
              <Label htmlFor="options">Opções (separadas por vírgula)</Label>
              <Input
                id="options"
                value={formData.options}
                onChange={(e) => setFormData(prev => ({ ...prev, options: e.target.value }))}
                placeholder="Ex: Urgente, Normal, Baixa"
              />
            </div>
          )}
        </div>
        <DialogFooter>
          <Button variant="outline" onClick={handleClose}>
            Cancelar
          </Button>
          <Button onClick={handleSave}>
            Criar Filtro
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default CreateFilterModal;