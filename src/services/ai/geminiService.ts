// Servi√ßo para integra√ß√£o com Google Gemini API
// Este arquivo cont√©m todas as fun√ß√µes necess√°rias para comunica√ß√£o com a IA Gemini

export interface GeminiConfig {
  apiKey: string;
  model?: string;
  maxTokens?: number;
  temperature?: number;
}

export interface GeminiResponse {
  text: string;
  error?: string;
}

export interface ContractAnalysisResult {
  summary: string;
  keyTerms: {
    parties: string[];
    value: string;
    startDate: string;
    endDate: string;
    duration: string;
  };
  riskAnalysis: {
    highRisk: string[];
    mediumRisk: string[];
    lowRisk: string[];
  };
  clauses: {
    payment: string[];
    termination: string[];
    liability: string[];
    other: string[];
  };
  recommendations: string[];
  score: number; // 0-100
}

export class ContractPrompts {
  /**
   * Prompt especializado para an√°lise de contratos
   */
  static getContractAnalysisPrompt(): string {
    return `
# ESPECIALISTA EM AN√ÅLISE DE CONTRATOS

Voc√™ √© um especialista em an√°lise de contratos com 20 anos de experi√™ncia em direito empresarial e an√°lise de riscos. Sua tarefa √© analisar contratos de forma meticulosa e produzir relat√≥rios t√©cnicos detalhados.

## INSTRU√á√ïES DE AN√ÅLISE

### 1. IDENTIFICA√á√ÉO DE ELEMENTOS ESSENCIAIS
- **Partes envolvidas**: Identifique todas as empresas/pessoas f√≠sicas
- **Objeto do contrato**: Determine claramente qual servi√ßo/produto est√° sendo contratado
- **Valores**: Extraia todos os valores monet√°rios, formas de pagamento e reajustes
- **Prazos**: Identifique datas de in√≠cio, fim, vig√™ncia e prazos importantes
- **Condi√ß√µes**: Analise condi√ß√µes suspensivas, resolutivas e especiais

### 2. AN√ÅLISE DE RISCOS (CLASSIFICA√á√ÉO OBRIGAT√ìRIA)
Classifique cada risco encontrado em:

**üî¥ ALTO RISCO** (podem causar perdas significativas):
- Cl√°usulas leoninas ou abusivas
- Aus√™ncia de garantias adequadas
- Penalidades desproporcionais
- Falta de cl√°usulas de prote√ß√£o essenciais
- Responsabilidades ilimitadas

**üü° M√âDIO RISCO** (requerem aten√ß√£o):
- Termos amb√≠guos ou mal definidos
- Prazos apertados ou inadequados
- Cl√°usulas de reajuste problem√°ticas
- Falta de detalhamento t√©cnico

**üü¢ BAIXO RISCO** (pontos de aten√ß√£o):
- Quest√µes menores de reda√ß√£o
- Prazos padr√£o de mercado
- Cl√°usulas boilerplate adequadas

### 3. AN√ÅLISE DE CL√ÅUSULAS ESPEC√çFICAS
- **Pagamento**: Valores, prazos, multas, juros, reajustes
- **Rescis√£o**: Condi√ß√µes, penalidades, avisos pr√©vios
- **Responsabilidades**: Civil, criminal, limita√ß√µes de responsabilidade
- **Outras**: Confidencialidade, propriedade intelectual, foro, etc.

### 4. PONTUA√á√ÉO DE QUALIDADE (0-100)
- 90-100: Contrato excelente, baixo risco
- 70-89: Contrato bom, riscos control√°veis
- 50-69: Contrato regular, necessita melhorias
- 30-49: Contrato ruim, riscos significativos
- 0-29: Contrato cr√≠tico, revis√£o urgente necess√°ria

## FORMATO DE RESPOSTA (JSON)

Responda APENAS em formato JSON v√°lido, seguindo exatamente esta estrutura:

\`\`\`json
{
  "summary": "Resumo executivo do contrato em 2-3 frases",
  "keyTerms": {
    "parties": ["Parte 1", "Parte 2"],
    "value": "R$ X.XXX,XX ou 'N√£o especificado'",
    "startDate": "DD/MM/AAAA ou 'N√£o especificado'",
    "endDate": "DD/MM/AAAA ou 'N√£o especificado'",
    "duration": "X meses ou 'Indeterminado'"
  },
  "riskAnalysis": {
    "highRisk": ["Risco cr√≠tico 1", "Risco cr√≠tico 2"],
    "mediumRisk": ["Risco m√©dio 1", "Risco m√©dio 2"],
    "lowRisk": ["Ponto de aten√ß√£o 1", "Ponto de aten√ß√£o 2"]
  },
  "clauses": {
    "payment": ["Descri√ß√£o da cl√°usula de pagamento"],
    "termination": ["Descri√ß√£o da cl√°usula de rescis√£o"],
    "liability": ["Descri√ß√£o da cl√°usula de responsabilidade"],
    "other": ["Outras cl√°usulas relevantes"]
  },
  "recommendations": [
    "Recomenda√ß√£o espec√≠fica 1",
    "Recomenda√ß√£o espec√≠fica 2",
    "Recomenda√ß√£o espec√≠fica 3"
  ],
  "score": 85
}
\`\`\`

## CRIT√âRIOS IMPORTANTES
- Seja objetivo e t√©cnico
- Use terminologia jur√≠dica apropriada
- Foque em riscos concretos e mensur√°veis
- Forne√ßa recomenda√ß√µes acion√°veis
- Mantenha consist√™ncia na pontua√ß√£o
- N√£o invente informa√ß√µes que n√£o est√£o no contrato

Agora analise o(s) contrato(s) fornecido(s):`;
  }

  /**
   * Prompt para an√°lise de chunk individual
   */
  static getChunkAnalysisPrompt(chunkIndex: number, totalChunks: number): string {
    return `
# AN√ÅLISE DE SE√á√ÉO DE CONTRATO (Parte ${chunkIndex + 1} de ${totalChunks})

Voc√™ est√° analisando uma se√ß√£o espec√≠fica de um contrato. Extraia apenas as informa√ß√µes presentes nesta se√ß√£o, sem fazer suposi√ß√µes sobre o contrato completo.

## INSTRU√á√ïES
1. Identifique cl√°usulas e termos presentes nesta se√ß√£o
2. Analise riscos espec√≠ficos desta parte
3. Note informa√ß√µes importantes (valores, datas, condi√ß√µes)
4. Indique se a se√ß√£o est√° incompleta ou continua em outra parte

## FORMATO DE RESPOSTA JSON
\`\`\`json
{
  "section": "Identifica√ß√£o da se√ß√£o (ex: Cl√°usulas de Pagamento)",
  "keyPoints": ["Ponto importante 1", "Ponto importante 2"],
  "risks": {
    "high": ["Risco alto identificado"],
    "medium": ["Risco m√©dio identificado"],
    "low": ["Ponto de aten√ß√£o"]
  },
  "values": ["Valores monet√°rios encontrados"],
  "dates": ["Datas encontradas"],
  "parties": ["Partes mencionadas nesta se√ß√£o"],
  "incomplete": true/false,
  "notes": "Observa√ß√µes adicionais sobre esta se√ß√£o"
}
\`\`\`

Analise a seguinte se√ß√£o do contrato:`;
  }
}

export class GeminiService {
  private apiKey: string;
  private model: string;
  private baseUrl = 'https://generativelanguage.googleapis.com/v1beta';

  constructor(config: GeminiConfig) {
    this.apiKey = config.apiKey;
    this.model = config.model || 'gemini-1.5-flash';
  }

  /**
   * Envia prompt para o Gemini e retorna resposta com retry autom√°tico
   */
  async generateContent(prompt: string, retryCount = 0): Promise<GeminiResponse> {
    const maxRetries = 5; // Aumentado para 5 tentativas
    const baseDelay = 2000; // Aumentado para 2 segundos
    
    try {
      const url = `${this.baseUrl}/models/${this.model}:generateContent?key=${this.apiKey}`;
      
      console.log(`ü§ñ Chamando Gemini API (tentativa ${retryCount + 1}/${maxRetries + 1}):`, url);
      
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: prompt
            }]
          }],
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 8192,
          },
          safetySettings: [
            {
              category: "HARM_CATEGORY_HARASSMENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_HATE_SPEECH", 
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_DANGEROUS_CONTENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            }
          ]
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Resposta da API Gemini:', {
          status: response.status,
          statusText: response.statusText,
          body: errorText
        });

        // Se for erro 503 (modelo sobrecarregado) ou 429 (rate limit) e ainda temos tentativas, fazer retry
        if ((response.status === 503 || response.status === 429) && retryCount < maxRetries) {
          const delay = baseDelay * Math.pow(2, retryCount); // Backoff exponencial
          console.log(`‚è≥ Servi√ßo temporariamente indispon√≠vel (${response.status}). Tentando novamente em ${delay}ms... (${retryCount + 1}/${maxRetries})`);
          await new Promise(resolve => setTimeout(resolve, delay));
          return this.generateContent(prompt, retryCount + 1);
        }

        throw new Error(`Erro na API Gemini: ${response.status} ${response.statusText}. Detalhes: ${errorText}`);
      }

      const data = await response.json();
      
      if (data.candidates && data.candidates[0]?.content?.parts?.[0]?.text) {
        console.log('‚úÖ Resposta recebida do Gemini com sucesso');
        return {
          text: data.candidates[0].content.parts[0].text
        };
      } else {
        throw new Error('Resposta inv√°lida da API Gemini');
      }

    } catch (error) {
      console.error('Erro ao chamar Gemini API:', error);
      
      // Se for erro de rede ou timeout e ainda temos tentativas, fazer retry
      if (retryCount < maxRetries && (
        error instanceof TypeError || // Erro de rede
        (error instanceof Error && error.message.includes('fetch'))
      )) {
        const delay = baseDelay * Math.pow(2, retryCount);
        console.log(`‚è≥ Erro de rede. Tentando novamente em ${delay}ms...`);
        await new Promise(resolve => setTimeout(resolve, delay));
        return this.generateContent(prompt, retryCount + 1);
      }

      return {
        text: '',
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      };
    }
  }

  /**
   * Analisa um √∫nico contrato e retorna resultado estruturado
   */
  async analyzeContract(contractText: string): Promise<ContractAnalysisResult> {
    try {
      console.log('üîç Iniciando an√°lise de contrato √∫nico');
      
      // Usar prompt especializado para contratos
      const prompt = ContractPrompts.getContractAnalysisPrompt();
      const fullPrompt = `${prompt}\n\n${contractText}`;

      console.log(`üìù Prompt criado: ${fullPrompt.length} caracteres`);

      // Chamar Gemini
      const result = await this.generateContent(fullPrompt);
      
      if (result.error) {
        console.error('‚ùå Erro na an√°lise:', result.error);
        throw new Error(result.error);
      }

      // Parse do resultado JSON
      let analysisResult: ContractAnalysisResult;
      
      try {
        // Limpar markdown se presente
        let cleanText = result.text.trim();
        if (cleanText.includes('```json')) {
          cleanText = cleanText.split('```json')[1].split('```')[0].trim();
        } else if (cleanText.includes('```')) {
          cleanText = cleanText.split('```')[1].split('```')[0].trim();
        }
        
        analysisResult = JSON.parse(cleanText);
        console.log('‚úÖ An√°lise conclu√≠da e parseada com sucesso');
        
      } catch (parseError) {
        console.error('‚ùå Erro ao fazer parse do JSON:', parseError);
        console.log('üîç Resposta bruta:', result.text);
        
        // Fallback com an√°lise b√°sica
        analysisResult = {
          summary: "Erro no parse da an√°lise. Revisar manualmente.",
          keyTerms: {
            parties: ["An√°lise indispon√≠vel"],
            value: "Erro no parse",
            startDate: "A definir",
            endDate: "A definir",
            duration: "A definir"
          },
          riskAnalysis: {
            highRisk: ["Erro na an√°lise autom√°tica"],
            mediumRisk: [],
            lowRisk: []
          },
          clauses: {
            payment: ["Erro na an√°lise"],
            termination: ["Erro na an√°lise"],
            liability: ["Erro na an√°lise"],
            other: []
          },
          recommendations: ["Revisar contrato manualmente devido a erro na an√°lise"],
          score: 50
        };
      }

      return analysisResult;

    } catch (error) {
      console.error('‚ùå Erro ao analisar contrato:', error);
      
      // Retornar an√°lise de fallback
      return {
        summary: "Erro na an√°lise do contrato. Revisar manualmente.",
        keyTerms: {
          parties: ["Erro na an√°lise"],
          value: "Erro na an√°lise",
          startDate: "A definir",
          endDate: "A definir", 
          duration: "A definir"
        },
        riskAnalysis: {
          highRisk: ["Erro na an√°lise autom√°tica - revisar manualmente"],
          mediumRisk: [],
          lowRisk: []
        },
        clauses: {
          payment: ["Erro na an√°lise"],
          termination: ["Erro na an√°lise"],
          liability: ["Erro na an√°lise"],
          other: []
        },
        recommendations: ["Revisar contrato manualmente devido a erro na an√°lise"],
        score: 50
      };
    }
  }

  /**
   * Analisa documentos de contratos usando o prompt especializado
   */
  async analyzeContracts(documentsContent: string[]): Promise<GeminiResponse> {
    try {
      console.log(`üîç Iniciando an√°lise de ${documentsContent.length} documentos`);
      
      // Combinar conte√∫do dos documentos
      const combinedContent = documentsContent
        .map((content, index) => `\n\n=== DOCUMENTO ${index + 1} ===\n${content}`)
        .join('\n');

      // Usar prompt especializado para contratos
      const prompt = ContractPrompts.getContractAnalysisPrompt();
      const fullPrompt = `${prompt}\n\n${combinedContent}`;

      console.log(`üìù Prompt criado: ${fullPrompt.length} caracteres`);

      // Chamar Gemini
      const result = await this.generateContent(fullPrompt);
      
      if (result.error) {
        console.error('‚ùå Erro na an√°lise:', result.error);
      } else {
        console.log('‚úÖ An√°lise conclu√≠da com sucesso');
      }

      return result;

    } catch (error) {
      console.error('‚ùå Erro ao analisar contratos:', error);
      return {
        text: '',
        error: error instanceof Error ? error.message : 'Erro na an√°lise de contratos'
      };
    }
  }

  /**
   * Analisa um chunk individual de contrato
   */
  async analyzeContractChunk(
    chunkContent: string, 
    chunkIndex: number, 
    totalChunks: number
  ): Promise<GeminiResponse> {
    try {
      console.log(`üîç Analisando chunk ${chunkIndex + 1}/${totalChunks}`);
      
      const prompt = ContractPrompts.getChunkAnalysisPrompt(chunkIndex, totalChunks);
      const fullPrompt = `${prompt}\n\n${chunkContent}`;

      const result = await this.generateContent(fullPrompt);
      
      if (result.error) {
        console.error(`‚ùå Erro na an√°lise do chunk ${chunkIndex + 1}:`, result.error);
      } else {
        console.log(`‚úÖ Chunk ${chunkIndex + 1} analisado com sucesso`);
      }

      return result;

    } catch (error) {
      console.error(`‚ùå Erro ao analisar chunk ${chunkIndex + 1}:`, error);
      return {
        text: '',
        error: error instanceof Error ? error.message : 'Erro na an√°lise do chunk'
      };
    }
  }

  /**
   * Consolida resultados de m√∫ltiplos chunks em uma an√°lise final
   */
  async consolidateChunkAnalyses(chunkAnalyses: string[]): Promise<GeminiResponse> {
    try {
      console.log(`üîÑ Consolidando ${chunkAnalyses.length} an√°lises de chunks`);

      const consolidationPrompt = `
# CONSOLIDA√á√ÉO DE AN√ÅLISES DE CONTRATO

Voc√™ recebeu an√°lises individuais de diferentes se√ß√µes de um ou mais contratos. Sua tarefa √© consolidar essas an√°lises em um relat√≥rio final completo e coerente.

## INSTRU√á√ïES DE CONSOLIDA√á√ÉO
1. Combine informa√ß√µes duplicadas ou relacionadas
2. Resolva contradi√ß√µes priorizando informa√ß√µes mais espec√≠ficas
3. Crie uma vis√£o unificada do(s) contrato(s)
4. Mantenha a classifica√ß√£o de riscos mais conservadora (maior risco)
5. Calcule score final baseado no conjunto completo

## AN√ÅLISES INDIVIDUAIS RECEBIDAS:
${chunkAnalyses.map((analysis, index) => `\n--- AN√ÅLISE ${index + 1} ---\n${analysis}`).join('\n')}

## FORMATO DE RESPOSTA
Use o mesmo formato JSON da an√°lise de contrato completo, consolidando todas as informa√ß√µes:

${ContractPrompts.getContractAnalysisPrompt().split('Agora analise')[0]}

Agora consolide as an√°lises em um relat√≥rio final:`;

      const result = await this.generateContent(consolidationPrompt);
      
      if (result.error) {
        console.error('‚ùå Erro na consolida√ß√£o:', result.error);
      } else {
        console.log('‚úÖ Consolida√ß√£o conclu√≠da com sucesso');
      }

      return result;

    } catch (error) {
      console.error('‚ùå Erro ao consolidar an√°lises:', error);
      return {
        text: '',
        error: error instanceof Error ? error.message : 'Erro na consolida√ß√£o de an√°lises'
      };
    }
  }
}

// Inst√¢ncia singleton do servi√ßo
let geminiService: GeminiService | null = null;

/**
 * Inicializa o servi√ßo Gemini com a chave da API
 */
export function initializeGemini(apiKey: string): GeminiService {
  const config: GeminiConfig = {
    apiKey: apiKey,
    model: 'gemini-1.5-flash',
    maxTokens: 8192,
    temperature: 0.7
  };

  geminiService = new GeminiService(config);
  return geminiService;
}

/**
 * Retorna a inst√¢ncia do servi√ßo Gemini
 */
export function getGeminiService(): GeminiService {
  if (!geminiService) {
    throw new Error('Servi√ßo Gemini n√£o foi inicializado. Chame initializeGemini() primeiro.');
  }
  return geminiService;
}
